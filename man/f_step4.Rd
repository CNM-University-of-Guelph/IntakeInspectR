% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/f_by_bin_steps.R
\name{f_step4}
\alias{f_step4}
\title{By Bin - Step4 - Correct start weights}
\usage{
f_step4(
  df_step3,
  zero_thresh = 0.3,
  col_bin_ID = .data$bin_id,
  col_date = .data$date,
  col_start_time = .data$start_time,
  col_start_weight_kg = .data$start_weight_kg,
  col_end_weight_kg = .data$end_weight_kg,
  col_intake = .data$intake,
  col_check_end_weight_kgs = .data$check_end_weight_kgs,
  col_prevEnd,
  col_prevStart,
  col_nextStart
)
}
\arguments{
\item{df_step3}{Data frame returned from [f_step3()]}

\item{zero_thresh}{Number. What threshold (+/- ____ kg) should be used to
determine an intake is about 0 kg? Default +/- 0.3 kg. For example, an
intake would be considered 'negative' if it was <= 0.3 kg, rather than <= 0
kg.}

\item{col_bin_ID}{Name of column with feed bin ID.}

\item{col_date}{Name of column with date (formatted as Date) of feeding event}

\item{col_start_time}{Name of column with start time (formatted as POSIXct
date-time) recorded by feed bin.}

\item{col_start_weight_kg, col_end_weight_kg}{Name of columns with start and end
weights (in kg) recorded by feed bin.}

\item{col_intake}{Name of column with the feed intake (kg) for the feeding
event, normally calculated as end_weight_kg - start_weight_kg.}

\item{col_check_end_weight_kgs, col_prevEnd, col_prevStart, col_nextStart}{Names of
columns computed by [f_step3()]}
}
\value{
The original data frame with the additional columns:
 * prev_step3_check
 * check_start_weight_kgs
 * corrected_start_weight_kg_bybin
}
\description{
Occasionally the start weights are recorded incorrectly and can be determined
using similar logic to [f_step3()].
}
\details{
If there is an abnormality, the column check_start_weight_kgs will classify as
either: `'keep: WARNING: start and end weight > prevEnd'` or
`'replace: start weight too high'`. Both of these flags check that
`prevEnd - start_weight_kg is < 10 kg and > 0.3kg`, based on [f_step2()] thresholds.
 Then, they also both check that the end weight is ~ equal to following start
 weight (using the `zero_thresh` to determine equality). Therefore, the difference
 between the 'keep' and the 'replace' is based on the check of the end weight
 with the previous end weight. If the end weight is lower than the previous end
 weight, it is assumed that the high start weight is an error that can be replaced
 by taking the previous end weight as the new start weight. If this is not true, it
 gives the warning: 'start and end weight > prevEnd'.
}
