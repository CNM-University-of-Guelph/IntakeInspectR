% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/f_by_bin_steps.R
\name{f_step3}
\alias{f_step3}
\title{By Bin - Step3 - Correct end weights}
\usage{
f_step3(
  df_step2_ok,
  zero_thresh = 0.3,
  feedout_thresh = 10,
  col_bin_ID = .data$bin_id,
  col_date = .data$date,
  col_start_time = .data$start_time,
  col_start_weight_kg = .data$start_weight_kg,
  col_end_weight_kg = .data$end_weight_kg,
  col_intake = .data$intake,
  col_check_prev_vs_next = .data$check_prev_vs_next
)
}
\arguments{
\item{df_step2_ok}{Data frame of `step2_ok` output from [f_step2()]}

\item{zero_thresh}{Number. What threshold (+/- ____ kg) should be used to
determine an intake is about 0 kg? Default +/- 0.3 kg. For example, an
intake would be considered 'negative' if it was <= 0.3 kg, rather than <= 0
kg.}

\item{feedout_thresh}{Number. What threshold (kg) should be used to call an
increase in feed intake a feed out event? Default 10 kg}

\item{col_bin_ID}{Name of column with feed bin ID.}

\item{col_date}{Name of column with date (formatted as Date) of feeding event}

\item{col_start_time}{Name of column with start time (formatted as POSIXct
date-time) recorded by feed bin.}

\item{col_start_weight_kg, col_end_weight_kg}{Name of columns with start and end
weights (in kg) recorded by feed bin.}

\item{col_intake}{Name of column with the feed intake (kg) for the feeding
event, normally calculated as end_weight_kg - start_weight_kg.}

\item{col_check_prev_vs_next}{Name of column generated by [f_step2()]
typically called `check_prev_vs_next`}
}
\value{
The original `df_step2` data frame, with the following additional
  columns:
* prevEnd, prevStart, nextEnd, nextStart - used by check_end_weight_kgs and
downstream functions
* check_end_weight_kgs - error types as described above
* corrected_end_weight_kg_bybin - corrected end weights based on check_end_weight_kgs
* category_end_weight_kg - classification of errors (keep, replace, error)
}
\description{
This function calculates the various conditions used to check the
  original end weights recorded by a feed bin on a single day. This method
  chronologically checks weights from the row preceding (above) and following
  (below) and compares them to the current row to see if the change in
  weights are logical. Based on these check, the function then corrects any
  end weights that it can do so safely.

  For example, a typical error occurs when the weight recorded at the end of
  a feeding event (`end_weight_kg`) is greater than the weight recorded at the
  beginning of the feeding event (`start_weight_kg`), resulting in a negative
  feed intake. This is likely due to the inability of the sensor (load cell)
  to get a stable weight, for example when a animal bumps the feed bin when
  exiting. Therefore, if the start weight of the next feeding event
  (`nextStart`) is lower than both the `start_weight_kg` and `end_weight_kg`, then
  this function flags it as a `replace:` error. This means it is logical to
  replace the `end_weight_kg` with `nextStart` as it is assumed that no other
  feed was removed between these times as no other feeding events were
  recorded for that feed bin.

  See details below for full description of other checks.

  This function is normally not used by a user, but is used by the
  [f_by_bin_clean()] function.
}
\details{
## Error categories

Firstly, because the errors from [step2] are separated out, the `prevEnd`,
`prevStart`, `nextEnd`, `nextStart` are re-calculated without these errors.
These errors were flagged for not being consistent with the data above and
below them, so removing them improves the ability of this script to detect
row-by-row errors.

Then, a new column called `check_end_weight_kgs` is added to the original data
frame and contains 3 types of categories:

   * `error:` - These entries are flagged as errors because they do not make
sense when compared to the rows above and below, but can also not be safely
replaced using logic. If kept, these intakes can be re-estimated using a
regression in `step4`. These entries should be checked manually to determine
why these errors occurred. It may be better to exclude them rather than
re-estimate them with a regression.
   * `keep:` - These entries are considered good and will not be changed.
Most entries should be included in this category.
   * `replace:` - These entries are flagged to have the `end_weight_kg` replaced
with the start weight of the next feeding event (`nextStart`)

## Description of each error type

There are various ways that an event can be allocated to a category (`error`,
`keep` & `replace`). These are listed in the order they are checked by a call
to [dplyr::case_when()].

1. `error: negative with errors`: This error is flagged when the `nextStart`
< `end_weight_kg` & `nextStart` > `start_weight_kg`. In this case, the intake is
negative but the values are not consistent with the next starting weight and
can not be safely replaced.

2. `replace: negative intake`: This is the classic case that is described
above in the description of this function where the `end_weight_kg` should be
replace by `nextStart`. It is flagged when: `nextStart` < `end_weight_kg` &
`nextStart` <= `start_weight_kg` & `intake` <= `-1 * zero_thresh` where
`zero_thresh` is the parameter of this function that represents the threshold
for determining what should be considered not 0 kg (defaults to 0.3 kg).

3a. `keep: feed removed >= zero_thresh`: This is opposite of `replace:
negative intake`, where the `intake` is >= the `zero_thresh`. Then, if the
`end_weight_kg` is more than `zero_thresh`  higher than `nextStart` then it indicates
feed was removed, and it was more than `zero_thresh`.

3b. `keep: feed removed: minor (< zero_thresh)`: The alternative to 3a is that
feed was removed, but that it was basically 0 kg (i.e. < `zero_thresh`)

4a. Feed out:  `error: feed out event with neg intake`:  When the difference
between `nextStart` and `end_weight_kg` is greater than the parameter
`feedout_thresh`. A reasonable estimate is 10 kg, as it is unlikely that less
than 10kg of feed is added, but there are times when this might be different
in research. In this case, if the intake is still a negative event
(determined using `zero_thresh`) then there's no way to correct it.

#' 4b. Feed out: `keep: feed out event`: as above, except when intake is positive.

5. `error: weight increase < feedout_thresh`: This is flagged when the
`nextStart` > `end_weight_kg` but the difference is < `feedout_thresh` and >= the
inverse of `zero_thresh` (i.e. `-1 * zero_thresh`). The inverse is used because
it represents the level of error around 0 kg that can be considered close
enough to 0 kg to accept as 'minor'.

6. `keep: minor increase`: As above, except that the difference is between
+/- `zero_thresh` and therefore considered 'minor' increase and therefore
replacing the `end_weight_kg` with the `nextStart` is more realistic and without
significant effects on intake values.

7. `error: negative last row`: The data are stored by day, and the last event
for each feed bin on each day can therefore not be checked against the
`nextStart` as no data is available. In this case, if the `intake` is
negative then it also cannot be corrected.

8. `keep: last row`: When the last row does not have a negative intake, then
it is flagged as 'keep'.

9. `keep`: The only rows to remain after all other checks should have an
`end_weight_kg` that is equal to `startNext`.

10. `CHECK FUNCTION: no conditions TRUE for check_end_weight_kg` Finally, a
default value is included to return this warning for each row that is not
caught by any of the previous conditions. This should not be returned, and if
it is then it means there is somehow a condition that is unique to the
dataset and should be evaluated further.
}
\examples{
\dontrun{
f_step3(df_step2_ok,
  zero_thresh =  -0.3,
  feedout_thresh =  10 ,
  col_bin_ID = bin_id,
  col_date = date,
  col_start_time = start_time,
  col_start_weight_kg = start_weight_kg,
  col_end_weight_kg = end_weight_kg,
  col_check_prev_vs_next = check_prev_vs_next
)
}

}
